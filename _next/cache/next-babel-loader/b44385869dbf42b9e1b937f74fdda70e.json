{"ast":null,"code":"var _jsxFileName = \"/home/maticaba/matidev/mainpage-frontend/pages/projects.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Head from 'next/head';\nimport { useState } from 'react'; // Components & Usables\n\nimport CauseList from '@/components/specific/causeList'; // Apollo\n\nimport { initializeApollo } from '../api';\nimport { useQuery, gql } from '@apollo/client';\n// Schema\n\n/* const querySchema = gql`\n  query Organizations(\n    $causeId: String\n    $country: String\n    $donationLinks: Boolean\n    $donationBankAccountName: Boolean\n    $donationProducts: Boolean\n    $endCursor: String\n  ) {\n    getOrganizations(\n      first: 12\n      endCursor: $endCursor\n      causeId: $causeId\n      country: $country\n      donationLinks: $donationLinks\n      donationBankAccountName: $donationBankAccountName\n      donationProducts: $donationProducts\n    ) {\n      pageData {\n        totalOrganizations\n        hasNextPage\n        endCursor\n      }\n      organizations {\n        id\n        name\n        slug\n        country\n        logoUrl\n        donationLinks\n        donationBankAccountName\n        donationProducts\n        causes {\n          name\n        }\n      }\n    }\n  }\n` */\nconst querySchema = gql`\n  query getOrganizationsFilter($limit: Float, $page: Float, $country: String) {\n    getOrganizations(limit: $limit, page: $page, country: $country) {\n      id\n      name\n      slug\n      country\n      logoUrl\n      donationLinks\n      donationBankAccountName\n      causes {\n        name\n      }\n    }\n  }\n`;\nconst filtersDefault = {\n  country: ''\n  /*   donationLinks: false,\n  donationBankAccountName: false,\n  donationProducts: false, */\n\n  /*   causeId: '',\n   */\n\n  /*   endCursor: '', */\n\n};\n\nconst OngList = () => {\n  // Filter State\n  const {\n    0: filters,\n    1: setFilters\n  } = useState(filtersDefault);\n  const {\n    data,\n    loading,\n    error,\n    refetch,\n    fetchMore\n  } = useQuery(querySchema, {\n    variables: filters\n  }); // Filter handlers\n\n  const handleCountry = async country => {\n    await setFilters(_objectSpread(_objectSpread({}, filters), {}, {\n      country: country\n    }));\n    await refetch();\n  };\n  /*   const handleCauseId = async (causeId) => {\n    await setFilters({ ...filters, causeId: causeId })\n    await refetch()\n  }\n  const handleDonationLinks = async (boolean) => {\n    await setFilters({ ...filters, donationLinks: boolean })\n    await refetch()\n  } */\n\n\n  const handleDonationBankAccountName = async boolean => {\n    await setFilters(_objectSpread(_objectSpread({}, filters), {}, {\n      donationBankAccountName: boolean,\n      endCursor: ''\n    }));\n    await refetch();\n  };\n\n  const handleDonationProducts = async boolean => {\n    await setFilters(_objectSpread(_objectSpread({}, filters), {}, {\n      donationProducts: boolean,\n      endCursor: ''\n    }));\n    await refetch();\n  };\n\n  const resetFilters = async () => {\n    await setFilters(filtersDefault);\n  };\n\n  if (error) {\n    console.log(error);\n  }\n\n  const handleNextPage = async () => {\n    const {\n      endCursor\n    } = data.getOrganizations.pageData;\n    await setFilters(_objectSpread(_objectSpread({}, filters), {}, {\n      endCursor: endCursor\n    }));\n    fetchMore({\n      variables: filters,\n      updateQuery: (prevResult, {\n        fetchMoreResult\n      }) => {\n        var _data$getOrganization, _fetchMoreResult$getO;\n\n        if (!fetchMoreResult) return prevResult;\n        return {\n          getOrganizations: _objectSpread(_objectSpread({}, data === null || data === void 0 ? void 0 : data.getOrganizations), {}, {\n            data: [...(data === null || data === void 0 ? void 0 : (_data$getOrganization = data.getOrganizations) === null || _data$getOrganization === void 0 ? void 0 : _data$getOrganization.organizations), ...(fetchMoreResult === null || fetchMoreResult === void 0 ? void 0 : (_fetchMoreResult$getO = fetchMoreResult.getOrganizations) === null || _fetchMoreResult$getO === void 0 ? void 0 : _fetchMoreResult$getO.organizations)]\n          })\n        };\n        /*         fetchMoreResult.getOrganizations = [\n          ...prevResult.getOrganizations,\n          ...fetchMoreResult.getOrganizations,\n        ]\n        return fetchMoreResult */\n      }\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  }, \"Organizaciones | gentem\")), !loading && console.log(data.getOrganizations), __jsx(CauseList, {\n    select: {\n      handleCauseId,\n      handleCountry\n    },\n    checkbox: {\n      handleDonationLinks,\n      handleDonationBankAccountName,\n      handleDonationProducts\n    },\n    handleNextPage: handleNextPage,\n    filters: filters,\n    resetFilters: resetFilters,\n    loading: loading,\n    data: !loading && data.getOrganizations,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default OngList;\nexport const getServerSideProps = async () => {\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: querySchema,\n    variables: filtersDefault\n  });\n  return {\n    props: {\n      initialApolloState: apolloClient.cache.extract()\n    }\n  };\n};","map":{"version":3,"sources":["/home/maticaba/matidev/mainpage-frontend/pages/projects.tsx"],"names":["Head","useState","CauseList","initializeApollo","useQuery","gql","querySchema","filtersDefault","country","OngList","filters","setFilters","data","loading","error","refetch","fetchMore","variables","handleCountry","handleDonationBankAccountName","boolean","donationBankAccountName","endCursor","handleDonationProducts","donationProducts","resetFilters","console","log","handleNextPage","getOrganizations","pageData","updateQuery","prevResult","fetchMoreResult","organizations","handleCauseId","handleDonationLinks","getServerSideProps","apolloClient","query","props","initialApolloState","cache","extract"],"mappings":"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","sourcesContent":["import { NextPage, GetServerSideProps } from 'next'\nimport Head from 'next/head'\nimport { useState } from 'react'\n\n// Components & Usables\nimport CauseList from '@/components/specific/causeList'\n\n// Apollo\nimport { initializeApollo } from '../api'\nimport { useQuery, gql } from '@apollo/client'\n\ninterface organization {\n  id: string\n  name: string\n  slug: string\n  country: string\n  logoUrl: string\n  donationLinks: string[]\n  donationBankAccountName: string\n  donationProducts: string\n  causes: string[]\n}\n\ninterface pageData {\n  totalOrganizations: number\n  hasNextPage: boolean\n  endCursor: string\n}\n\ninterface data {\n  getOrganizations: {\n    pageData: pageData\n    organizations: organization[]\n  }\n}\n\n// Schema\n/* const querySchema = gql`\n  query Organizations(\n    $causeId: String\n    $country: String\n    $donationLinks: Boolean\n    $donationBankAccountName: Boolean\n    $donationProducts: Boolean\n    $endCursor: String\n  ) {\n    getOrganizations(\n      first: 12\n      endCursor: $endCursor\n      causeId: $causeId\n      country: $country\n      donationLinks: $donationLinks\n      donationBankAccountName: $donationBankAccountName\n      donationProducts: $donationProducts\n    ) {\n      pageData {\n        totalOrganizations\n        hasNextPage\n        endCursor\n      }\n      organizations {\n        id\n        name\n        slug\n        country\n        logoUrl\n        donationLinks\n        donationBankAccountName\n        donationProducts\n        causes {\n          name\n        }\n      }\n    }\n  }\n` */\n\nconst querySchema = gql`\n  query getOrganizationsFilter($limit: Float, $page: Float, $country: String) {\n    getOrganizations(limit: $limit, page: $page, country: $country) {\n      id\n      name\n      slug\n      country\n      logoUrl\n      donationLinks\n      donationBankAccountName\n      causes {\n        name\n      }\n    }\n  }\n`\n\nconst filtersDefault = {\n  country: '',\n  /*   donationLinks: false,\n  donationBankAccountName: false,\n  donationProducts: false, */\n  /*   causeId: '',\n   */\n  /*   endCursor: '', */\n}\nconst OngList: NextPage = () => {\n  // Filter State\n  const [filters, setFilters] = useState(filtersDefault)\n  const { data, loading, error, refetch, fetchMore } = useQuery<data>(\n    querySchema,\n    {\n      variables: filters,\n    }\n  )\n  // Filter handlers\n  const handleCountry = async (country) => {\n    await setFilters({ ...filters, country: country })\n    await refetch()\n  }\n  /*   const handleCauseId = async (causeId) => {\n    await setFilters({ ...filters, causeId: causeId })\n    await refetch()\n  }\n  const handleDonationLinks = async (boolean) => {\n    await setFilters({ ...filters, donationLinks: boolean })\n    await refetch()\n  } */\n  const handleDonationBankAccountName = async (boolean) => {\n    await setFilters({\n      ...filters,\n      donationBankAccountName: boolean,\n      endCursor: '',\n    })\n    await refetch()\n  }\n  const handleDonationProducts = async (boolean) => {\n    await setFilters({\n      ...filters,\n      donationProducts: boolean,\n      endCursor: '',\n    })\n    await refetch()\n  }\n  const resetFilters = async () => {\n    await setFilters(filtersDefault)\n  }\n  if (error) {\n    console.log(error)\n  }\n  const handleNextPage = async () => {\n    const { endCursor } = data.getOrganizations.pageData\n    await setFilters({ ...filters, endCursor: endCursor })\n    fetchMore({\n      variables: filters,\n      updateQuery: (prevResult: any, { fetchMoreResult }) => {\n        if (!fetchMoreResult) return prevResult\n        return {\n          getOrganizations: {\n            ...data?.getOrganizations,\n            data: [\n              ...data?.getOrganizations?.organizations,\n              ...fetchMoreResult?.getOrganizations?.organizations,\n            ],\n          },\n        }\n        /*         fetchMoreResult.getOrganizations = [\n          ...prevResult.getOrganizations,\n          ...fetchMoreResult.getOrganizations,\n        ]\n        return fetchMoreResult */\n      },\n    })\n  }\n  return (\n    <>\n      <Head>\n        <title>Organizaciones | gentem</title>\n      </Head>\n\n      {!loading && console.log(data.getOrganizations)}\n      <CauseList\n        select={{ handleCauseId, handleCountry }}\n        checkbox={{\n          handleDonationLinks,\n          handleDonationBankAccountName,\n          handleDonationProducts,\n        }}\n        handleNextPage={handleNextPage}\n        filters={filters}\n        resetFilters={resetFilters}\n        loading={loading}\n        data={!loading && data.getOrganizations}\n      />\n    </>\n  )\n}\n\nexport default OngList\n\nexport const getServerSideProps: GetServerSideProps = async () => {\n  const apolloClient = initializeApollo()\n\n  await apolloClient.query({\n    query: querySchema,\n    variables: filtersDefault,\n  })\n\n  return {\n    props: {\n      initialApolloState: apolloClient.cache.extract(),\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}