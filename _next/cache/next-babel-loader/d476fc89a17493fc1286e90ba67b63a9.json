{"ast":null,"code":"var _jsxFileName = \"/home/maticaba/matidev/mainpage-frontend/pages/cause/[slug].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport Head from 'next/head'; // Usables & Componentes\n\nimport Cause from '@/components/specific/cause'; // Apollo\n\nimport { initializeApollo } from '../../api';\nimport { gql } from '@apollo/client';\nconst querySchema = gql`\n  query getOrganization($slug: String) {\n    getOrganization(slug: $slug) {\n      id\n      name\n      description\n      goal\n      logoUrl\n      howItIsUsingDonations\n      contactEmail\n      contactPhone\n      contactWebsite\n      whatsappPhone\n      facebookUrl\n      twitterUrl\n      instagramUrl\n      donationBankAccountName\n      donationLinks\n      city\n      country\n      coordenateX\n      coordenateY\n      causes {\n        name\n      }\n    }\n  }\n`;\n\nconst ORG = props => {\n  const router = useRouter();\n  const {\n    slug\n  } = router.query;\n  console.log(props.query.data.getOrganization.name);\n  /*   const ong = data.getOrganization */\n\n  if (props.query.loading) return __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 35\n    }\n  }, \"Loading...\");\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, props.query.data.getOrganization.name, \" | gentem\")), __jsx(Cause, {\n    data: props.query.data.getOrganization,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }));\n};\n/* export const getStaticPaths: GetStaticPaths = async () => {\n  let paths\n  paths = [{ params: { slug: 'kawsay' } }]\n  return { paths, fallback: false }\n} */\n\n\nexport const getServerSideProps = async ({\n  params\n}) => {\n  const apolloClient = initializeApollo();\n  const query = await apolloClient.query({\n    query: querySchema,\n    variables: {\n      slug: params.slug\n    }\n  });\n  apolloClient.cache.extract();\n  return {\n    props: {\n      query\n    }\n  };\n};\nexport default ORG;","map":{"version":3,"sources":["/home/maticaba/matidev/mainpage-frontend/pages/cause/[slug].tsx"],"names":["useRouter","Head","Cause","initializeApollo","gql","querySchema","ORG","props","router","slug","query","console","log","data","getOrganization","name","loading","getServerSideProps","params","apolloClient","variables","cache","extract"],"mappings":";;;AACA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,IAAP,MAAiB,WAAjB,C,CAEA;;AACA,OAAOC,KAAP,MAAkB,6BAAlB,C,CAEA;;AACA,SAASC,gBAAT,QAAiC,WAAjC;AACA,SAAmBC,GAAnB,QAA8B,gBAA9B;AAGA,MAAMC,WAAW,GAAGD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAxB;;AA6BA,MAAME,GAAG,GAAIC,KAAD,IAAoD;AAC9D,QAAMC,MAAM,GAAGR,SAAS,EAAxB;AACA,QAAM;AAAES,IAAAA;AAAF,MAAWD,MAAM,CAACE,KAAxB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACG,KAAN,CAAYG,IAAZ,CAAiBC,eAAjB,CAAiCC,IAA7C;AACA;;AAEA,MAAIR,KAAK,CAACG,KAAN,CAAYM,OAAhB,EAAyB,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACzB,SACE,4BACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQT,KAAK,CAACG,KAAN,CAAYG,IAAZ,CAAiBC,eAAjB,CAAiCC,IAAzC,cADF,CADF,EAIE,MAAC,KAAD;AAAO,IAAA,IAAI,EAAER,KAAK,CAACG,KAAN,CAAYG,IAAZ,CAAiBC,eAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF;AAQD,CAfD;AAiBA;;;;;;;AAMA,OAAO,MAAMG,kBAAsC,GAAG,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAsB;AAC1E,QAAMC,YAAY,GAAGhB,gBAAgB,EAArC;AAEA,QAAMO,KAAK,GAAG,MAAMS,YAAY,CAACT,KAAb,CAAmB;AACrCA,IAAAA,KAAK,EAAEL,WAD8B;AAErCe,IAAAA,SAAS,EAAE;AAAEX,MAAAA,IAAI,EAAES,MAAM,CAACT;AAAf;AAF0B,GAAnB,CAApB;AAIAU,EAAAA,YAAY,CAACE,KAAb,CAAmBC,OAAnB;AACA,SAAO;AACLf,IAAAA,KAAK,EAAE;AACLG,MAAAA;AADK;AADF,GAAP;AAKD,CAbM;AAeP,eAAeJ,GAAf","sourcesContent":["import { NextPage, GetServerSideProps } from 'next'\nimport { useRouter } from 'next/router'\nimport Head from 'next/head'\n\n// Usables & Componentes\nimport Cause from '@/components/specific/cause'\n\n// Apollo\nimport { initializeApollo } from '../../api'\nimport { useQuery, gql } from '@apollo/client'\nimport { getOrganization } from 'interfaces/organization'\n\nconst querySchema = gql`\n  query getOrganization($slug: String) {\n    getOrganization(slug: $slug) {\n      id\n      name\n      description\n      goal\n      logoUrl\n      howItIsUsingDonations\n      contactEmail\n      contactPhone\n      contactWebsite\n      whatsappPhone\n      facebookUrl\n      twitterUrl\n      instagramUrl\n      donationBankAccountName\n      donationLinks\n      city\n      country\n      coordenateX\n      coordenateY\n      causes {\n        name\n      }\n    }\n  }\n`\n\nconst ORG = (props: { query: getOrganization }): JSX.Element => {\n  const router = useRouter()\n  const { slug } = router.query\n  console.log(props.query.data.getOrganization.name)\n  /*   const ong = data.getOrganization */\n\n  if (props.query.loading) return <span>Loading...</span>\n  return (\n    <>\n      <Head>\n        <title>{props.query.data.getOrganization.name} | gentem</title>\n      </Head>\n      <Cause data={props.query.data.getOrganization} />\n    </>\n  )\n}\n\n/* export const getStaticPaths: GetStaticPaths = async () => {\n  let paths\n  paths = [{ params: { slug: 'kawsay' } }]\n  return { paths, fallback: false }\n} */\n\nexport const getServerSideProps: GetServerSideProps = async ({ params }) => {\n  const apolloClient = initializeApollo()\n\n  const query = await apolloClient.query({\n    query: querySchema,\n    variables: { slug: params.slug },\n  })\n  apolloClient.cache.extract()\n  return {\n    props: {\n      query,\n    },\n  }\n}\n\nexport default ORG\n"]},"metadata":{},"sourceType":"module"}