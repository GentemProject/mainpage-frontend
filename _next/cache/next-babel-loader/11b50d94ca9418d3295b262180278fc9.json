{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/home/maticaba/matidev/mainpage-frontend/pages/projects.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query getOrganizationsFilter(\\n    $page: Float\\n    $country: String\\n    $causeId: String\\n  ) {\\n    getOrganizations(\\n      limit: 12\\n      page: $page\\n      country: $country\\n      causeId: $causeId\\n    ) {\\n      id\\n      name\\n      slug\\n      country\\n      logoUrl\\n      donationLinks\\n      donationBankAccountName\\n      causes {\\n        id\\n        name\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Head from 'next/head';\nimport { useState } from 'react'; // Components & Usables\n\nimport CauseList from '@/components/specific/causeList'; // Apollo\n\nimport { useQuery, gql } from '@apollo/client';\n// Schema\n\n/* const querySchema = gql`\n  query Organizations(\n    $causeId: String\n    $country: String\n    $donationLinks: Boolean\n    $donationBankAccountName: Boolean\n    $donationProducts: Boolean\n    $endCursor: String\n  ) {\n    getOrganizations(\n      first: 12\n      endCursor: $endCursor\n      causeId: $causeId\n      country: $country\n      donationLinks: $donationLinks\n      donationBankAccountName: $donationBankAccountName\n      donationProducts: $donationProducts\n    ) {\n      pageData {\n        totalOrganizations\n        hasNextPage\n        endCursor\n      }\n      organizations {\n        id\n        name\n        slug\n        country\n        logoUrl\n        donationLinks\n        donationBankAccountName\n        donationProducts\n        causes {\n          name\n        }\n      }\n    }\n  }\n` */\nvar querySchema = gql(_templateObject());\nvar filtersDefault = {\n  country: '',\n  causeId: '',\n  page: 0\n  /*   donationLinks: false,\n  donationBankAccountName: false,\n   donationProducts: false, */\n\n  /*   endCursor: '', */\n\n};\n\nvar OngList = function OngList(props) {\n  _s();\n\n  var query = props.query;\n\n  var _useState = useState(query.data.getOrganizations),\n      organizationArray = _useState[0],\n      setOrganizationArray = _useState[1]; // Filter State\n\n\n  var _useState2 = useState(filtersDefault),\n      filters = _useState2[0],\n      setFilters = _useState2[1];\n\n  var _useQuery = useQuery(querySchema, {\n    variables: filters\n  }),\n      data = _useQuery.data,\n      refetch = _useQuery.refetch,\n      fetchMore = _useQuery.fetchMore; // Filter handlers\n\n\n  var handleCountry = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(country) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return setFilters(_objectSpread(_objectSpread({}, filters), {}, {\n                country: country,\n                page: 0\n              }));\n\n            case 2:\n              _context.next = 4;\n              return refetch();\n\n            case 4:\n              _context.next = 6;\n              return setOrganizationArray(data.getOrganization);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleCountry(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleCauseId = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(causeId) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return setFilters(_objectSpread(_objectSpread({}, filters), {}, {\n                causeId: causeId,\n                page: 0\n              }));\n\n            case 2:\n              _context2.next = 4;\n              return refetch();\n\n            case 4:\n              _context2.next = 6;\n              return setOrganizationArray(data.getOrganization);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleCauseId(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /*  \n  const handleDonationLinks = async (boolean) => {\n    await setFilters({ ...filters, donationLinks: boolean })\n    await refetch()\n  } */\n\n  /*   const handleDonationBankAccountName = async (boolean) => {\n    await setFilters({\n      ...filters,\n      donationBankAccountName: boolean,\n      endCursor: '',\n    })\n    await refetch()\n  } */\n\n  /*   const handleDonationProducts = async (boolean) => {\n    await setFilters({\n      ...filters,\n      donationProducts: boolean,\n      endCursor: '',\n    })\n    await refetch()\n  } */\n\n\n  var resetFilters = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return setFilters(filtersDefault);\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function resetFilters() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var handleNextPage = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return setFilters(_objectSpread(_objectSpread({}, filters), {}, {\n                page: filters.page + 1\n              }));\n\n            case 2:\n              fetchMore({\n                variables: filters,\n                updateQuery: function updateQuery(prevResult, _ref5) {\n                  var _fetchMoreResult$getO;\n\n                  var fetchMoreResult = _ref5.fetchMoreResult;\n                  if (!fetchMoreResult) return prevResult;\n                  console.log(prevResult, 'prev');\n                  console.log(fetchMoreResult, 'more');\n                  return {\n                    getOrganizations: _objectSpread(_objectSpread({}, query.data.getOrganizations), {}, {\n                      data: [].concat(_toConsumableArray(query.data.getOrganizations), _toConsumableArray(fetchMoreResult === null || fetchMoreResult === void 0 ? void 0 : (_fetchMoreResult$getO = fetchMoreResult.getOrganizations) === null || _fetchMoreResult$getO === void 0 ? void 0 : _fetchMoreResult$getO.organizations))\n                    })\n                  };\n                  /*         fetchMoreResult.getOrganizations = [\n                    ...prevResult.getOrganizations,\n                    ...fetchMoreResult.getOrganizations,\n                  ]\n                  return fetchMoreResult */\n                }\n              });\n\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function handleNextPage() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }, \"Organizaciones | gentem\")), __jsx(CauseList, {\n    select: {\n      handleCauseId: handleCauseId,\n      handleCountry: handleCountry\n    }\n    /*  checkbox={{\n      handleDonationLinks,\n      handleDonationBankAccountName,\n      handleDonationProducts,\n    }} */\n    ,\n    handleNextPage: handleNextPage,\n    filters: filters,\n    resetFilters: resetFilters,\n    loading: query.loading,\n    data: !query.loading && query.data.getOrganizations,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(OngList, \"rMK5luq441l3zpMJTq8VEjQPYA4=\", false, function () {\n  return [useQuery];\n});\n\n_c = OngList;\nexport var __N_SSP = true;\nexport default OngList;\n\nvar _c;\n\n$RefreshReg$(_c, \"OngList\");","map":{"version":3,"sources":["/home/maticaba/matidev/mainpage-frontend/pages/projects.tsx"],"names":["Head","useState","CauseList","useQuery","gql","querySchema","filtersDefault","country","causeId","page","OngList","props","query","data","getOrganizations","organizationArray","setOrganizationArray","filters","setFilters","variables","refetch","fetchMore","handleCountry","getOrganization","handleCauseId","resetFilters","handleNextPage","updateQuery","prevResult","fetchMoreResult","console","log","organizations","loading"],"mappings":"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","sourcesContent":["import { NextPage, GetServerSideProps } from 'next'\nimport Head from 'next/head'\nimport { useState } from 'react'\n\n// Components & Usables\nimport CauseList from '@/components/specific/causeList'\n\n// Apollo\nimport { initializeApollo } from '../api'\nimport { useQuery, gql } from '@apollo/client'\nimport { getOrganizationsFilters } from 'interfaces/organization'\n\ninterface organization {\n  id: string\n  name: string\n  slug: string\n  country: string\n  logoUrl: string\n  donationLinks: string[]\n  donationBankAccountName: string\n  donationProducts: string\n  causes: string[]\n}\n\ninterface pageData {\n  totalOrganizations: number\n  hasNextPage: boolean\n  endCursor: string\n}\n\ninterface data {\n  getOrganizations: {\n    pageData: pageData\n    organizations: organization[]\n  }\n}\n\n// Schema\n/* const querySchema = gql`\n  query Organizations(\n    $causeId: String\n    $country: String\n    $donationLinks: Boolean\n    $donationBankAccountName: Boolean\n    $donationProducts: Boolean\n    $endCursor: String\n  ) {\n    getOrganizations(\n      first: 12\n      endCursor: $endCursor\n      causeId: $causeId\n      country: $country\n      donationLinks: $donationLinks\n      donationBankAccountName: $donationBankAccountName\n      donationProducts: $donationProducts\n    ) {\n      pageData {\n        totalOrganizations\n        hasNextPage\n        endCursor\n      }\n      organizations {\n        id\n        name\n        slug\n        country\n        logoUrl\n        donationLinks\n        donationBankAccountName\n        donationProducts\n        causes {\n          name\n        }\n      }\n    }\n  }\n` */\n\nconst querySchema = gql`\n  query getOrganizationsFilter(\n    $page: Float\n    $country: String\n    $causeId: String\n  ) {\n    getOrganizations(\n      limit: 12\n      page: $page\n      country: $country\n      causeId: $causeId\n    ) {\n      id\n      name\n      slug\n      country\n      logoUrl\n      donationLinks\n      donationBankAccountName\n      causes {\n        id\n        name\n      }\n    }\n  }\n`\n\nconst filtersDefault = {\n  country: '',\n  causeId: '',\n  page: 0,\n  /*   donationLinks: false,\n  donationBankAccountName: false,\n\n  donationProducts: false, */\n  /*   endCursor: '', */\n}\nconst OngList = (props: { query: getOrganizationsFilters }): JSX.Element => {\n  const { query } = props\n  const [organizationArray, setOrganizationArray] = useState(\n    query.data.getOrganizations\n  )\n  // Filter State\n  const [filters, setFilters] = useState(filtersDefault)\n  const { data, refetch, fetchMore } = useQuery(querySchema, {\n    variables: filters,\n  })\n  // Filter handlers\n  const handleCountry = async (country) => {\n    await setFilters({ ...filters, country: country, page: 0 })\n    await refetch()\n    await setOrganizationArray(data.getOrganization)\n  }\n  const handleCauseId = async (causeId) => {\n    await setFilters({ ...filters, causeId: causeId, page: 0 })\n    await refetch()\n    await setOrganizationArray(data.getOrganization)\n  }\n  /*  \n  const handleDonationLinks = async (boolean) => {\n    await setFilters({ ...filters, donationLinks: boolean })\n    await refetch()\n  } */\n  /*   const handleDonationBankAccountName = async (boolean) => {\n    await setFilters({\n      ...filters,\n      donationBankAccountName: boolean,\n      endCursor: '',\n    })\n    await refetch()\n  } */\n  /*   const handleDonationProducts = async (boolean) => {\n    await setFilters({\n      ...filters,\n      donationProducts: boolean,\n      endCursor: '',\n    })\n    await refetch()\n  } */\n  const resetFilters = async () => {\n    await setFilters(filtersDefault)\n  }\n\n  const handleNextPage = async () => {\n    await setFilters({ ...filters, page: filters.page + 1 })\n    fetchMore({\n      variables: filters,\n      updateQuery: (prevResult: any, { fetchMoreResult }) => {\n        if (!fetchMoreResult) return prevResult\n\n        console.log(prevResult, 'prev')\n        console.log(fetchMoreResult, 'more')\n        return {\n          getOrganizations: {\n            ...query.data.getOrganizations,\n            data: [\n              ...query.data.getOrganizations,\n              ...fetchMoreResult?.getOrganizations?.organizations,\n            ],\n          },\n        }\n        /*         fetchMoreResult.getOrganizations = [\n          ...prevResult.getOrganizations,\n          ...fetchMoreResult.getOrganizations,\n        ]\n        return fetchMoreResult */\n      },\n    })\n  }\n  return (\n    <>\n      <Head>\n        <title>Organizaciones | gentem</title>\n      </Head>\n      <CauseList\n        select={{ handleCauseId, handleCountry }}\n        /*  checkbox={{\n          handleDonationLinks,\n          handleDonationBankAccountName,\n          handleDonationProducts,\n        }} */\n        handleNextPage={handleNextPage}\n        filters={filters}\n        resetFilters={resetFilters}\n        loading={query.loading}\n        data={!query.loading && query.data.getOrganizations}\n      />\n    </>\n  )\n}\n\nexport default OngList\n\nexport const getServerSideProps: GetServerSideProps = async () => {\n  const apolloClient = initializeApollo()\n\n  const query = await apolloClient.query({\n    query: querySchema,\n    variables: filtersDefault,\n  })\n  apolloClient.cache.extract()\n  return {\n    props: {\n      query,\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}