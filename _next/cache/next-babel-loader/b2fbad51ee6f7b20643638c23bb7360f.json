{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/maticaba/matidev/mainpage-frontend/pages/cause/[slug].tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport Head from 'next/head'; // Usables & Componentes\n\nvar ORG = function ORG(props) {\n  _s();\n\n  var router = useRouter();\n  var slug = router.query.slug;\n  console.log(props.query);\n  /*   const ong = data.getOrganization */\n\n  /* if (loading) return <span>Loading...</span> */\n\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }));\n};\n/* export const getStaticPaths: GetStaticPaths = async () => {\n  let paths\n  paths = [{ params: { slug: 'kawsay' } }]\n  return { paths, fallback: false }\n} */\n\n\n_s(ORG, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = ORG;\nexport var __N_SSP = true;\nexport default ORG;\n\nvar _c;\n\n$RefreshReg$(_c, \"ORG\");","map":{"version":3,"sources":["/home/maticaba/matidev/mainpage-frontend/pages/cause/[slug].tsx"],"names":["useRouter","Head","ORG","props","router","slug","query","console","log"],"mappings":";;;;;;AACA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,IAAP,MAAiB,WAAjB,C,CAEA;;AAoCA,IAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,KAAD,EAAoD;AAAA;;AAC9D,MAAMC,MAAM,GAAGJ,SAAS,EAAxB;AAD8D,MAEtDK,IAFsD,GAE7CD,MAAM,CAACE,KAFsC,CAEtDD,IAFsD;AAG9DE,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACG,KAAlB;AACA;;AAEA;;AACA,SACE,4BACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAQD,CAfD;AAiBA;;;;;;;GAjBMJ,G;UACWF,S;;;KADXE,G;;AAsCN,eAAeA,GAAf","sourcesContent":["import { NextPage, GetServerSideProps } from 'next'\nimport { useRouter } from 'next/router'\nimport Head from 'next/head'\n\n// Usables & Componentes\nimport Cause from '@/components/specific/cause'\n\n// Apollo\nimport { initializeApollo } from '../../api'\nimport { useQuery, gql } from '@apollo/client'\nimport { getOrganization } from 'interfaces/organization'\n\nconst querySchema = gql`\n  query getOrganization($slug: String) {\n    getOrganization(slug: $slug) {\n      id\n      name\n      description\n      logoUrl\n      howItIsUsingDonations\n      contactEmail\n      contactPhone\n      contactWebsite\n      whatsappPhone\n      facebookUrl\n      twitterUrl\n      instagramUrl\n      donationBankAccountName\n      donationLinks\n      city\n      country\n      coordenateX\n      coordenateY\n      causes {\n        name\n      }\n    }\n  }\n`\n\nconst ORG = (props: { query: getOrganization }): JSX.Element => {\n  const router = useRouter()\n  const { slug } = router.query\n  console.log(props.query)\n  /*   const ong = data.getOrganization */\n\n  /* if (loading) return <span>Loading...</span> */\n  return (\n    <>\n      <Head>\n        {/*  <title>{props.query.data.getOrganization.name} | gentem</title> */}\n      </Head>\n      {/* <Cause data={ong} /> */}\n    </>\n  )\n}\n\n/* export const getStaticPaths: GetStaticPaths = async () => {\n  let paths\n  paths = [{ params: { slug: 'kawsay' } }]\n  return { paths, fallback: false }\n} */\n\nexport const getServerSideProps: GetServerSideProps = async ({ params }) => {\n  const apolloClient = initializeApollo()\n\n  const data = await apolloClient.query({\n    query: querySchema,\n    variables: { slug: params.slug },\n  })\n  apolloClient.cache.extract()\n  return {\n    props: {\n      query,\n    },\n  }\n}\n\nexport default ORG\n"]},"metadata":{},"sourceType":"module"}