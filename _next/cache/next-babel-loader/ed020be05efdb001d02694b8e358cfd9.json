{"ast":null,"code":"var _jsxFileName = \"/home/maticaba/matidev/mainpage-frontend/pages/projects.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Head from 'next/head';\nimport { useState } from 'react'; // Components & Usables\n\nimport CauseList from '@/components/specific/causeList'; // Apollo\n\nimport { initializeApollo } from '../api';\nimport { useQuery, gql } from '@apollo/client';\n// Schema\n\n/* const querySchema = gql`\n  query Organizations(\n    $causeId: String\n    $country: String\n    $donationLinks: Boolean\n    $donationBankAccountName: Boolean\n    $donationProducts: Boolean\n    $endCursor: String\n  ) {\n    getOrganizations(\n      first: 12\n      endCursor: $endCursor\n      causeId: $causeId\n      country: $country\n      donationLinks: $donationLinks\n      donationBankAccountName: $donationBankAccountName\n      donationProducts: $donationProducts\n    ) {\n      pageData {\n        totalOrganizations\n        hasNextPage\n        endCursor\n      }\n      organizations {\n        id\n        name\n        slug\n        country\n        logoUrl\n        donationLinks\n        donationBankAccountName\n        donationProducts\n        causes {\n          name\n        }\n      }\n    }\n  }\n` */\nconst querySchema = gql`\n  query getOrganizationsFilter(\n    $page: Float\n    $country: String\n    $causeId: String\n  ) {\n    getOrganizations(\n      limit: 12\n      page: $page\n      country: $country\n      causeId: $causeId\n    ) {\n      id\n      name\n      slug\n      country\n      logoUrl\n      donationLinks\n      donationBankAccountName\n      causes {\n        id\n        name\n      }\n    }\n  }\n`;\nconst filtersDefault = {\n  country: '',\n  causeId: '',\n  page: 0\n  /*   donationLinks: false,\n  donationBankAccountName: false,\n   donationProducts: false, */\n\n  /*   endCursor: '', */\n\n};\n\nconst OngList = props => {\n  const {\n    query\n  } = props; // Filter State\n\n  const {\n    0: filters,\n    1: setFilters\n  } = useState(filtersDefault);\n  const {\n    data,\n    refetch,\n    fetchMore\n  } = useQuery(querySchema, {\n    variables: filters\n  }); // Filter handlers\n\n  const handleCountry = async country => {\n    await setFilters(_objectSpread(_objectSpread({}, filters), {}, {\n      country: country,\n      page: 0\n    }));\n    await refetch();\n    console.log(data);\n  };\n\n  const handleCauseId = async causeId => {\n    await setFilters(_objectSpread(_objectSpread({}, filters), {}, {\n      causeId: causeId,\n      page: 0\n    }));\n    console.log(filters);\n    await refetch();\n  };\n  /*  \n  const handleDonationLinks = async (boolean) => {\n    await setFilters({ ...filters, donationLinks: boolean })\n    await refetch()\n  } */\n\n  /*   const handleDonationBankAccountName = async (boolean) => {\n    await setFilters({\n      ...filters,\n      donationBankAccountName: boolean,\n      endCursor: '',\n    })\n    await refetch()\n  } */\n\n  /*   const handleDonationProducts = async (boolean) => {\n    await setFilters({\n      ...filters,\n      donationProducts: boolean,\n      endCursor: '',\n    })\n    await refetch()\n  } */\n\n\n  const resetFilters = async () => {\n    await setFilters(filtersDefault);\n  };\n\n  const handleNextPage = async () => {\n    await setFilters(_objectSpread(_objectSpread({}, filters), {}, {\n      page: filters.page + 1\n    }));\n    fetchMore({\n      variables: filters,\n      updateQuery: (prevResult, {\n        fetchMoreResult\n      }) => {\n        var _fetchMoreResult$getO;\n\n        if (!fetchMoreResult) return prevResult;\n        console.log(prevResult, 'prev');\n        console.log(fetchMoreResult, 'more');\n        return {\n          getOrganizations: _objectSpread(_objectSpread({}, query.data.getOrganizations), {}, {\n            data: [...query.data.getOrganizations, ...(fetchMoreResult === null || fetchMoreResult === void 0 ? void 0 : (_fetchMoreResult$getO = fetchMoreResult.getOrganizations) === null || _fetchMoreResult$getO === void 0 ? void 0 : _fetchMoreResult$getO.organizations)]\n          })\n        };\n        /*         fetchMoreResult.getOrganizations = [\n          ...prevResult.getOrganizations,\n          ...fetchMoreResult.getOrganizations,\n        ]\n        return fetchMoreResult */\n      }\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }\n  }, \"Organizaciones | gentem\")), __jsx(CauseList, {\n    select: {\n      handleCauseId,\n      handleCountry\n    }\n    /*  checkbox={{\n      handleDonationLinks,\n      handleDonationBankAccountName,\n      handleDonationProducts,\n    }} */\n    ,\n    handleNextPage: handleNextPage,\n    filters: filters,\n    resetFilters: resetFilters,\n    loading: query.loading,\n    data: !query.loading && query.data.getOrganizations,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default OngList;\nexport const getServerSideProps = async () => {\n  const apolloClient = initializeApollo();\n  const query = await apolloClient.query({\n    query: querySchema,\n    variables: filtersDefault\n  });\n  apolloClient.cache.extract();\n  return {\n    props: {\n      query\n    }\n  };\n};","map":{"version":3,"sources":["/home/maticaba/matidev/mainpage-frontend/pages/projects.tsx"],"names":["Head","useState","CauseList","initializeApollo","useQuery","gql","querySchema","filtersDefault","country","causeId","page","OngList","props","query","filters","setFilters","data","refetch","fetchMore","variables","handleCountry","console","log","handleCauseId","resetFilters","handleNextPage","updateQuery","prevResult","fetchMoreResult","getOrganizations","organizations","loading","getServerSideProps","apolloClient","cache","extract"],"mappings":"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","sourcesContent":["import { NextPage, GetServerSideProps } from 'next'\nimport Head from 'next/head'\nimport { useState } from 'react'\n\n// Components & Usables\nimport CauseList from '@/components/specific/causeList'\n\n// Apollo\nimport { initializeApollo } from '../api'\nimport { useQuery, gql } from '@apollo/client'\nimport { getOrganizationsFilters } from 'interfaces/organization'\n\ninterface organization {\n  id: string\n  name: string\n  slug: string\n  country: string\n  logoUrl: string\n  donationLinks: string[]\n  donationBankAccountName: string\n  donationProducts: string\n  causes: string[]\n}\n\ninterface pageData {\n  totalOrganizations: number\n  hasNextPage: boolean\n  endCursor: string\n}\n\ninterface data {\n  getOrganizations: {\n    pageData: pageData\n    organizations: organization[]\n  }\n}\n\n// Schema\n/* const querySchema = gql`\n  query Organizations(\n    $causeId: String\n    $country: String\n    $donationLinks: Boolean\n    $donationBankAccountName: Boolean\n    $donationProducts: Boolean\n    $endCursor: String\n  ) {\n    getOrganizations(\n      first: 12\n      endCursor: $endCursor\n      causeId: $causeId\n      country: $country\n      donationLinks: $donationLinks\n      donationBankAccountName: $donationBankAccountName\n      donationProducts: $donationProducts\n    ) {\n      pageData {\n        totalOrganizations\n        hasNextPage\n        endCursor\n      }\n      organizations {\n        id\n        name\n        slug\n        country\n        logoUrl\n        donationLinks\n        donationBankAccountName\n        donationProducts\n        causes {\n          name\n        }\n      }\n    }\n  }\n` */\n\nconst querySchema = gql`\n  query getOrganizationsFilter(\n    $page: Float\n    $country: String\n    $causeId: String\n  ) {\n    getOrganizations(\n      limit: 12\n      page: $page\n      country: $country\n      causeId: $causeId\n    ) {\n      id\n      name\n      slug\n      country\n      logoUrl\n      donationLinks\n      donationBankAccountName\n      causes {\n        id\n        name\n      }\n    }\n  }\n`\n\nconst filtersDefault = {\n  country: '',\n  causeId: '',\n  page: 0,\n  /*   donationLinks: false,\n  donationBankAccountName: false,\n\n  donationProducts: false, */\n  /*   endCursor: '', */\n}\nconst OngList = (props: { query: getOrganizationsFilters }): JSX.Element => {\n  const { query } = props\n  // Filter State\n  const [filters, setFilters] = useState(filtersDefault)\n  const { data, refetch, fetchMore } = useQuery(querySchema, {\n    variables: filters,\n  })\n  // Filter handlers\n  const handleCountry = async (country) => {\n    await setFilters({ ...filters, country: country, page: 0 })\n    await refetch()\n    console.log(data)\n  }\n  const handleCauseId = async (causeId) => {\n    await setFilters({ ...filters, causeId: causeId, page: 0 })\n    console.log(filters)\n    await refetch()\n  }\n  /*  \n  const handleDonationLinks = async (boolean) => {\n    await setFilters({ ...filters, donationLinks: boolean })\n    await refetch()\n  } */\n  /*   const handleDonationBankAccountName = async (boolean) => {\n    await setFilters({\n      ...filters,\n      donationBankAccountName: boolean,\n      endCursor: '',\n    })\n    await refetch()\n  } */\n  /*   const handleDonationProducts = async (boolean) => {\n    await setFilters({\n      ...filters,\n      donationProducts: boolean,\n      endCursor: '',\n    })\n    await refetch()\n  } */\n  const resetFilters = async () => {\n    await setFilters(filtersDefault)\n  }\n\n  const handleNextPage = async () => {\n    await setFilters({ ...filters, page: filters.page + 1 })\n    fetchMore({\n      variables: filters,\n      updateQuery: (prevResult: any, { fetchMoreResult }) => {\n        if (!fetchMoreResult) return prevResult\n\n        console.log(prevResult, 'prev')\n        console.log(fetchMoreResult, 'more')\n        return {\n          getOrganizations: {\n            ...query.data.getOrganizations,\n            data: [\n              ...query.data.getOrganizations,\n              ...fetchMoreResult?.getOrganizations?.organizations,\n            ],\n          },\n        }\n        /*         fetchMoreResult.getOrganizations = [\n          ...prevResult.getOrganizations,\n          ...fetchMoreResult.getOrganizations,\n        ]\n        return fetchMoreResult */\n      },\n    })\n  }\n  return (\n    <>\n      <Head>\n        <title>Organizaciones | gentem</title>\n      </Head>\n      <CauseList\n        select={{ handleCauseId, handleCountry }}\n        /*  checkbox={{\n          handleDonationLinks,\n          handleDonationBankAccountName,\n          handleDonationProducts,\n        }} */\n        handleNextPage={handleNextPage}\n        filters={filters}\n        resetFilters={resetFilters}\n        loading={query.loading}\n        data={!query.loading && query.data.getOrganizations}\n      />\n    </>\n  )\n}\n\nexport default OngList\n\nexport const getServerSideProps: GetServerSideProps = async () => {\n  const apolloClient = initializeApollo()\n\n  const query = await apolloClient.query({\n    query: querySchema,\n    variables: filtersDefault,\n  })\n  apolloClient.cache.extract()\n  return {\n    props: {\n      query,\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}