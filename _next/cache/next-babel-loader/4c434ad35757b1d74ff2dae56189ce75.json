{"ast":null,"code":"var _jsxFileName = \"/home/maticaba/matidev/mainpage-frontend/pages/projects.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Head from 'next/head';\nimport { useState } from 'react'; // Components & Usables\n\n// Apollo\nimport { initializeApollo } from '../api';\nimport { useQuery, gql } from '@apollo/client';\n// Schema\n\n/* const querySchema = gql`\n  query Organizations(\n    $causeId: String\n    $country: String\n    $donationLinks: Boolean\n    $donationBankAccountName: Boolean\n    $donationProducts: Boolean\n    $endCursor: String\n  ) {\n    getOrganizations(\n      first: 12\n      endCursor: $endCursor\n      causeId: $causeId\n      country: $country\n      donationLinks: $donationLinks\n      donationBankAccountName: $donationBankAccountName\n      donationProducts: $donationProducts\n    ) {\n      pageData {\n        totalOrganizations\n        hasNextPage\n        endCursor\n      }\n      organizations {\n        id\n        name\n        slug\n        country\n        logoUrl\n        donationLinks\n        donationBankAccountName\n        donationProducts\n        causes {\n          name\n        }\n      }\n    }\n  }\n` */\nconst querySchema = gql`\n  query getOrganizationsFilter(\n    $limit: Float\n    $page: Float\n    $country: String\n    $causeId: String\n  ) {\n    getOrganizations(\n      limit: $limit\n      page: $page\n      country: $country\n      causeId: $causeId\n    ) {\n      id\n      name\n      slug\n      country\n      logoUrl\n      donationLinks\n      donationBankAccountName\n      causes {\n        name\n      }\n    }\n  }\n`;\nconst filtersDefault = {\n  country: '',\n  causeId: '',\n  page: 0\n  /*   donationLinks: false,\n  donationBankAccountName: false,\n   donationProducts: false, */\n\n  /*   endCursor: '', */\n\n};\n\nconst OngList = props => {\n  console.log(props); // Filter State\n\n  const {\n    0: filters,\n    1: setFilters\n  } = useState(filtersDefault);\n  const {\n    refetch,\n    fetchMore\n  } = useQuery(querySchema, {\n    variables: filters\n  }); // Filter handlers\n\n  const handleCountry = async country => {\n    await setFilters(_objectSpread(_objectSpread({}, filters), {}, {\n      country: country\n    }));\n    await refetch();\n  };\n\n  const handleCauseId = async causeId => {\n    await setFilters(_objectSpread(_objectSpread({}, filters), {}, {\n      causeId: causeId\n    }));\n    await refetch();\n  };\n  /*  \n  const handleDonationLinks = async (boolean) => {\n    await setFilters({ ...filters, donationLinks: boolean })\n    await refetch()\n  } */\n\n  /*   const handleDonationBankAccountName = async (boolean) => {\n    await setFilters({\n      ...filters,\n      donationBankAccountName: boolean,\n      endCursor: '',\n    })\n    await refetch()\n  } */\n\n  /*   const handleDonationProducts = async (boolean) => {\n    await setFilters({\n      ...filters,\n      donationProducts: boolean,\n      endCursor: '',\n    })\n    await refetch()\n  } */\n\n\n  const resetFilters = async () => {\n    await setFilters(filtersDefault);\n  };\n  /*   const handleNextPage = async () => {\n    await setFilters({ ...filters, page: filters.page + 1 })\n    fetchMore({\n      variables: filters,\n      updateQuery: (prevResult: any, { fetchMoreResult }) => {\n        if (!fetchMoreResult) return prevResult\n        return {\n          getOrganizations: {\n            ...data?.getOrganizations,\n            data: [\n              ...data?.getOrganizations?.organizations,\n              ...fetchMoreResult?.getOrganizations?.organizations,\n            ],\n          },\n        } */\n\n  /*         fetchMoreResult.getOrganizations = [\n          ...prevResult.getOrganizations,\n          ...fetchMoreResult.getOrganizations,\n        ]\n        return fetchMoreResult */\n\n  /*      },\n    })\n  } */\n\n\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, \"Organizaciones | gentem\")), console.log(props.query.data.getOrganizations));\n};\n\nexport default OngList;\nexport const getServerSideProps = async () => {\n  const apolloClient = initializeApollo();\n  const query = await apolloClient.query({\n    query: querySchema,\n    variables: filtersDefault\n  });\n  apolloClient.cache.extract();\n  return {\n    props: {\n      query\n    }\n  };\n};","map":{"version":3,"sources":["/home/maticaba/matidev/mainpage-frontend/pages/projects.tsx"],"names":["Head","useState","initializeApollo","useQuery","gql","querySchema","filtersDefault","country","causeId","page","OngList","props","console","log","filters","setFilters","refetch","fetchMore","variables","handleCountry","handleCauseId","resetFilters","query","data","getOrganizations","getServerSideProps","apolloClient","cache","extract"],"mappings":";;;;;;;;;;AACA,OAAOA,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,QAAyB,OAAzB,C,CAEA;;AAGA;AACA,SAASC,gBAAT,QAAiC,QAAjC;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AA4BA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA,MAAMC,WAAW,GAAGD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;CAAxB;AA2BA,MAAME,cAAc,GAAG;AACrBC,EAAAA,OAAO,EAAE,EADY;AAErBC,EAAAA,OAAO,EAAE,EAFY;AAGrBC,EAAAA,IAAI,EAAE;AACN;;;;AAIA;;AARqB,CAAvB;;AAUA,MAAMC,OAAO,GAAIC,KAAD,IAA4D;AAC1EC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAD0E,CAE1E;;AACA,QAAM;AAAA,OAACG,OAAD;AAAA,OAAUC;AAAV,MAAwBd,QAAQ,CAACK,cAAD,CAAtC;AACA,QAAM;AAAEU,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAyBd,QAAQ,CAAOE,WAAP,EAAoB;AACzDa,IAAAA,SAAS,EAAEJ;AAD8C,GAApB,CAAvC,CAJ0E,CAO1E;;AACA,QAAMK,aAAa,GAAG,MAAOZ,OAAP,IAAmB;AACvC,UAAMQ,UAAU,iCAAMD,OAAN;AAAeP,MAAAA,OAAO,EAAEA;AAAxB,OAAhB;AACA,UAAMS,OAAO,EAAb;AACD,GAHD;;AAIA,QAAMI,aAAa,GAAG,MAAOZ,OAAP,IAAmB;AACvC,UAAMO,UAAU,iCAAMD,OAAN;AAAeN,MAAAA,OAAO,EAAEA;AAAxB,OAAhB;AACA,UAAMQ,OAAO,EAAb;AACD,GAHD;AAIA;;;;;;AAKA;;;;;;;;;AAQA;;;;;;;;;;AAQA,QAAMK,YAAY,GAAG,YAAY;AAC/B,UAAMN,UAAU,CAACT,cAAD,CAAhB;AACD,GAFD;AAIA;;;;;;;;;;;;;;;;AAeA;;;;;;AAKA;;;;;AAGA,SACE,4BACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADF,CADF,EAKGM,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACW,KAAN,CAAYC,IAAZ,CAAiBC,gBAA7B,CALH,CADF;AAsBD,CAtFD;;AAwFA,eAAed,OAAf;AAEA,OAAO,MAAMe,kBAAsC,GAAG,YAAY;AAChE,QAAMC,YAAY,GAAGxB,gBAAgB,EAArC;AAEA,QAAMoB,KAAK,GAAG,MAAMI,YAAY,CAACJ,KAAb,CAAmB;AACrCA,IAAAA,KAAK,EAAEjB,WAD8B;AAErCa,IAAAA,SAAS,EAAEZ;AAF0B,GAAnB,CAApB;AAIAoB,EAAAA,YAAY,CAACC,KAAb,CAAmBC,OAAnB;AACA,SAAO;AACLjB,IAAAA,KAAK,EAAE;AACLW,MAAAA;AADK;AADF,GAAP;AAKD,CAbM","sourcesContent":["import { NextPage, GetServerSideProps } from 'next'\nimport Head from 'next/head'\nimport { useState } from 'react'\n\n// Components & Usables\nimport CauseList from '@/components/specific/causeList'\n\n// Apollo\nimport { initializeApollo } from '../api'\nimport { useQuery, gql } from '@apollo/client'\nimport { getOrganizationsFilters } from 'interfaces/organization'\n\ninterface organization {\n  id: string\n  name: string\n  slug: string\n  country: string\n  logoUrl: string\n  donationLinks: string[]\n  donationBankAccountName: string\n  donationProducts: string\n  causes: string[]\n}\n\ninterface pageData {\n  totalOrganizations: number\n  hasNextPage: boolean\n  endCursor: string\n}\n\ninterface data {\n  getOrganizations: {\n    pageData: pageData\n    organizations: organization[]\n  }\n}\n\n// Schema\n/* const querySchema = gql`\n  query Organizations(\n    $causeId: String\n    $country: String\n    $donationLinks: Boolean\n    $donationBankAccountName: Boolean\n    $donationProducts: Boolean\n    $endCursor: String\n  ) {\n    getOrganizations(\n      first: 12\n      endCursor: $endCursor\n      causeId: $causeId\n      country: $country\n      donationLinks: $donationLinks\n      donationBankAccountName: $donationBankAccountName\n      donationProducts: $donationProducts\n    ) {\n      pageData {\n        totalOrganizations\n        hasNextPage\n        endCursor\n      }\n      organizations {\n        id\n        name\n        slug\n        country\n        logoUrl\n        donationLinks\n        donationBankAccountName\n        donationProducts\n        causes {\n          name\n        }\n      }\n    }\n  }\n` */\n\nconst querySchema = gql`\n  query getOrganizationsFilter(\n    $limit: Float\n    $page: Float\n    $country: String\n    $causeId: String\n  ) {\n    getOrganizations(\n      limit: $limit\n      page: $page\n      country: $country\n      causeId: $causeId\n    ) {\n      id\n      name\n      slug\n      country\n      logoUrl\n      donationLinks\n      donationBankAccountName\n      causes {\n        name\n      }\n    }\n  }\n`\n\nconst filtersDefault = {\n  country: '',\n  causeId: '',\n  page: 0,\n  /*   donationLinks: false,\n  donationBankAccountName: false,\n\n  donationProducts: false, */\n  /*   endCursor: '', */\n}\nconst OngList = (props: { query: getOrganizationsFilters }): JSX.Element => {\n  console.log(props)\n  // Filter State\n  const [filters, setFilters] = useState(filtersDefault)\n  const { refetch, fetchMore } = useQuery<data>(querySchema, {\n    variables: filters,\n  })\n  // Filter handlers\n  const handleCountry = async (country) => {\n    await setFilters({ ...filters, country: country })\n    await refetch()\n  }\n  const handleCauseId = async (causeId) => {\n    await setFilters({ ...filters, causeId: causeId })\n    await refetch()\n  }\n  /*  \n  const handleDonationLinks = async (boolean) => {\n    await setFilters({ ...filters, donationLinks: boolean })\n    await refetch()\n  } */\n  /*   const handleDonationBankAccountName = async (boolean) => {\n    await setFilters({\n      ...filters,\n      donationBankAccountName: boolean,\n      endCursor: '',\n    })\n    await refetch()\n  } */\n  /*   const handleDonationProducts = async (boolean) => {\n    await setFilters({\n      ...filters,\n      donationProducts: boolean,\n      endCursor: '',\n    })\n    await refetch()\n  } */\n  const resetFilters = async () => {\n    await setFilters(filtersDefault)\n  }\n\n  /*   const handleNextPage = async () => {\n    await setFilters({ ...filters, page: filters.page + 1 })\n    fetchMore({\n      variables: filters,\n      updateQuery: (prevResult: any, { fetchMoreResult }) => {\n        if (!fetchMoreResult) return prevResult\n        return {\n          getOrganizations: {\n            ...data?.getOrganizations,\n            data: [\n              ...data?.getOrganizations?.organizations,\n              ...fetchMoreResult?.getOrganizations?.organizations,\n            ],\n          },\n        } */\n  /*         fetchMoreResult.getOrganizations = [\n          ...prevResult.getOrganizations,\n          ...fetchMoreResult.getOrganizations,\n        ]\n        return fetchMoreResult */\n  /*      },\n    })\n  } */\n  return (\n    <>\n      <Head>\n        <title>Organizaciones | gentem</title>\n      </Head>\n\n      {console.log(props.query.data.getOrganizations)}\n      {/*       <CauseList\n        select={{ handleCauseId, handleCountry }}\n        checkbox={{\n          handleDonationLinks,\n          handleDonationBankAccountName,\n          handleDonationProducts,\n        }}\n        handleNextPage={handleNextPage}\n        filters={filters}\n        resetFilters={resetFilters}\n        loading={loading}\n        data={!loading && data.getOrganizations}\n      /> */}\n    </>\n  )\n}\n\nexport default OngList\n\nexport const getServerSideProps: GetServerSideProps = async () => {\n  const apolloClient = initializeApollo()\n\n  const query = await apolloClient.query({\n    query: querySchema,\n    variables: filtersDefault,\n  })\n  apolloClient.cache.extract()\n  return {\n    props: {\n      query,\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}