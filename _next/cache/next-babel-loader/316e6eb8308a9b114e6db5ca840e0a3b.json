{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\n\nvar ORG = function ORG(props) {\n  _s();\n\n  var router = useRouter();\n  var slug = router.query.slug;\n  /*   const ong = data.getOrganization */\n\n  /* if (loading) return <span>Loading...</span> */\n\n  return __jsx(React.Fragment, null, console.log(props));\n};\n/* export const getStaticPaths: GetStaticPaths = async () => {\n  let paths\n  paths = [{ params: { slug: 'kawsay' } }]\n  return { paths, fallback: false }\n} */\n\n\n_s(ORG, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = ORG;\nexport var __N_SSP = true;\nexport default ORG;\n\nvar _c;\n\n$RefreshReg$(_c, \"ORG\");","map":{"version":3,"sources":["/home/maticaba/matidev/mainpage-frontend/pages/cause/[slug].tsx"],"names":["useRouter","ORG","props","router","slug","query","console","log"],"mappings":";;;;AACA,SAASA,SAAT,QAA0B,aAA1B;;AAuCA,IAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,KAAD,EAAgD;AAAA;;AAC1D,MAAMC,MAAM,GAAGH,SAAS,EAAxB;AAD0D,MAElDI,IAFkD,GAEzCD,MAAM,CAACE,KAFkC,CAElDD,IAFkD;AAG1D;;AAEA;;AACA,SACE,4BACGE,OAAO,CAACC,GAAR,CAAYL,KAAZ,CADH,CADF;AASD,CAfD;AAiBA;;;;;;;GAjBMD,G;UACWD,S;;;KADXC,G;;AAsCN,eAAeA,GAAf","sourcesContent":["import { NextPage, GetServerSideProps } from 'next'\nimport { useRouter } from 'next/router'\nimport Head from 'next/head'\n\n// Usables & Componentes\nimport Cause from '@/components/specific/cause'\n\n// Apollo\nimport { initializeApollo } from '../../api'\nimport { useQuery, gql } from '@apollo/client'\nimport { Organization } from 'interfaces/organization'\n\nconst querySchema = gql`\n  query getOrganization($slug: String) {\n    getOrganization(slug: $slug) {\n      id\n      name\n      description\n      logoUrl\n      howItIsUsingDonations\n      contactEmail\n      contactPhone\n      contactWebsite\n      whatsappPhone\n      facebookUrl\n      twitterUrl\n      instagramUrl\n      donationBankAccountName\n      donationLinks\n      city\n      country\n      coordenateX\n      coordenateY\n      causes {\n        name\n      }\n    }\n  }\n`\n\nconst ORG = (props: { data: Organization }): JSX.Element => {\n  const router = useRouter()\n  const { slug } = router.query\n  /*   const ong = data.getOrganization */\n\n  /* if (loading) return <span>Loading...</span> */\n  return (\n    <>\n      {console.log(props)}\n      {/* <Head>\n        <title>{ong.name} | gentem</title>\n      </Head> */}\n      {/* <Cause data={ong} /> */}\n    </>\n  )\n}\n\n/* export const getStaticPaths: GetStaticPaths = async () => {\n  let paths\n  paths = [{ params: { slug: 'kawsay' } }]\n  return { paths, fallback: false }\n} */\n\nexport const getServerSideProps: GetServerSideProps = async ({ params }) => {\n  const apolloClient = initializeApollo()\n\n  const data = await apolloClient.query({\n    query: querySchema,\n    variables: { slug: params.slug },\n  })\n  apolloClient.cache.extract()\n  return {\n    props: {\n      data,\n    },\n  }\n}\n\nexport default ORG\n"]},"metadata":{},"sourceType":"module"}