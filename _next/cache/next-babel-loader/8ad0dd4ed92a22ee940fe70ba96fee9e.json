{"ast":null,"code":"const API = process.env.API_BACKEND;\nexport const getDistinct = async () => {\n  try {\n    const request = await fetch(`${API}/api/projects/distinct`);\n    const response = await request.json();\n    const data = response;\n    return data;\n  } catch (error) {\n    return error;\n  }\n};\nexport const getAll = async () => {\n  try {\n    const request = await fetch(`${API}/api/projects/`);\n    const response = await request.json();\n    const data = response;\n    const length = data.length;\n    return length;\n  } catch (error) {\n    return error;\n  }\n};\nexport const getAllOrganizations = async () => {\n  try {\n    const request = await fetch(`${API}/api/projects/getall`);\n    const response = await request.json();\n    const data = response;\n    const length = data.length;\n    return length;\n  } catch (error) {\n    return error;\n  }\n};\nexport const getAllOrganizationsPath = async () => {\n  try {\n    const request = await fetch(`${API}/api/projects/getall`);\n    const response = await request.json();\n    const data = response;\n    return data;\n  } catch (error) {\n    return error;\n  }\n};\nexport const getForId = async id => {\n  try {\n    const request = await fetch(`${API}/api/projects/${id}`);\n    const response = await request.json();\n    const data = response;\n    return data[0];\n  } catch (error) {\n    return error;\n  }\n};\nexport const getForFilters = async (skip = 0, params) => {\n  const limit = 15;\n\n  try {\n    const request = await fetch(`${API}/api/projects/filters/${params.country}&${params.products}&${params.donationData}&${params.transfer}&${params.causeId}?skip=${skip}&limit=${limit}`);\n    const response = await request.json();\n    const data = response;\n    return data;\n  } catch (error) {\n    return error;\n  }\n};\nexport const getLastest = async quanty => {\n  try {\n    const request = await fetch(`${API}/api/projects/lastest/${quanty}`);\n    const response = await request.json();\n    const data = response;\n    return data;\n  } catch (error) {\n    return error;\n  }\n};","map":{"version":3,"sources":["/home/maticaba/matidev/mainpage-frontend/api/filters.ts"],"names":["API","process","env","API_BACKEND","getDistinct","request","fetch","response","json","data","error","getAll","length","getAllOrganizations","getAllOrganizationsPath","getForId","id","getForFilters","skip","params","limit","country","products","donationData","transfer","causeId","getLastest","quanty"],"mappings":"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","sourcesContent":["const API = process.env.API_BACKEND\ninterface paramsFilters {\n  country: string | boolean\n  products: boolean\n  donationData: boolean\n  transfer: boolean\n  causeId: number\n}\n\nexport const getDistinct = async () => {\n  try {\n    const request = await fetch(`${API}/api/projects/distinct`)\n    const response = await request.json()\n    const data = response\n\n    return data\n  } catch (error) {\n    return error\n  }\n}\nexport const getAll = async () => {\n  try {\n    const request = await fetch(`${API}/api/projects/`)\n    const response = await request.json()\n    const data = response\n    const length = data.length\n\n    return length\n  } catch (error) {\n    return error\n  }\n}\nexport const getAllOrganizations = async () => {\n  try {\n    const request = await fetch(`${API}/api/projects/getall`)\n    const response = await request.json()\n    const data = response\n    const length = data.length\n\n    return length\n  } catch (error) {\n    return error\n  }\n}\nexport const getAllOrganizationsPath = async () => {\n  try {\n    const request = await fetch(`${API}/api/projects/getall`)\n    const response = await request.json()\n    const data = response\n\n    return data\n  } catch (error) {\n    return error\n  }\n}\nexport const getForId = async (id: any) => {\n  try {\n    const request = await fetch(`${API}/api/projects/${id}`)\n    const response = await request.json()\n    const data = response\n    return data[0]\n  } catch (error) {\n    return error\n  }\n}\n\nexport const getForFilters = async (skip = 0, params: paramsFilters) => {\n  const limit = 15\n  try {\n    const request = await fetch(\n      `${API}/api/projects/filters/${params.country}&${params.products}&${params.donationData}&${params.transfer}&${params.causeId}?skip=${skip}&limit=${limit}`\n    )\n    const response = await request.json()\n    const data = response\n    return data\n  } catch (error) {\n    return error\n  }\n}\nexport const getLastest = async (quanty: number) => {\n  try {\n    const request = await fetch(`${API}/api/projects/lastest/${quanty}`)\n    const response = await request.json()\n    const data = response\n    return data\n  } catch (error) {\n    return error\n  }\n}\n"]},"metadata":{},"sourceType":"module"}