{"ast":null,"code":"import fetch from 'cross-fetch';\nimport { useMemo } from 'react';\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\n/* const API = process.env.API_BACKEND; */\n\nconst API = 'http://localhost:3100';\nlet apolloClient;\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: true,\n    link: new HttpLink({\n      uri: `${API}/graphql`,\n      fetch,\n      credentials: ''\n    }),\n    cache: new InMemoryCache()\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  var _apolloClient2, _apolloClient3;\n\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient();\n\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  }\n\n  if (true) return _apolloClient;\n  apolloClient = (_apolloClient3 = apolloClient) !== null && _apolloClient3 !== void 0 ? _apolloClient3 : _apolloClient;\n  return apolloClient;\n}\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}","map":{"version":3,"sources":["/home/maticaba/matidev/mainpage-frontend/api/index.ts"],"names":["fetch","useMemo","ApolloClient","HttpLink","InMemoryCache","API","apolloClient","createApolloClient","ssrMode","link","uri","credentials","cache","initializeApollo","initialState","_apolloClient","restore","useApollo","store"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,aAAlB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SACEC,YADF,EAEEC,QAFF,EAGEC,aAHF,QAKO,gBALP;AAOA;;AACA,MAAMC,GAAG,GAAG,uBAAZ;AACA,IAAIC,YAAJ;;AAEA,SAASC,kBAAT,GAA8B;AAC5B,SAAO,IAAIL,YAAJ,CAAiB;AACtBM,IAAAA,OAAO,MADe;AAEtBC,IAAAA,IAAI,EAAE,IAAIN,QAAJ,CAAa;AACjBO,MAAAA,GAAG,EAAG,GAAEL,GAAI,UADK;AAEjBL,MAAAA,KAFiB;AAGjBW,MAAAA,WAAW,EAAE;AAHI,KAAb,CAFgB;AAOtBC,IAAAA,KAAK,EAAE,IAAIR,aAAJ;AAPe,GAAjB,CAAP;AASD;;AAED,OAAO,SAASS,gBAAT,CAA0BC,YAAY,GAAG,IAAzC,EAA+C;AAAA;;AACpD,QAAMC,aAAa,qBAAGT,YAAH,2DAAmBC,kBAAkB,EAAxD;;AAEA,MAAIO,YAAJ,EAAkB;AAChBC,IAAAA,aAAa,CAACH,KAAd,CAAoBI,OAApB,CAA4BF,YAA5B;AACD;;AACD,YAAmC,OAAOC,aAAP;AACnCT,EAAAA,YAAY,qBAAGA,YAAH,2DAAmBS,aAA/B;AAEA,SAAOT,YAAP;AACD;AAED,OAAO,SAASW,SAAT,CAAmBH,YAAnB,EAAiC;AACtC,QAAMI,KAAK,GAAGjB,OAAO,CAAC,MAAMY,gBAAgB,CAACC,YAAD,CAAvB,EAAuC,CAACA,YAAD,CAAvC,CAArB;AACA,SAAOI,KAAP;AACD","sourcesContent":["import fetch from 'cross-fetch'\nimport { useMemo } from 'react'\nimport {\n  ApolloClient,\n  HttpLink,\n  InMemoryCache,\n  NormalizedCacheObject,\n} from '@apollo/client'\n\n/* const API = process.env.API_BACKEND; */\nconst API = 'http://localhost:3100'\nlet apolloClient: ApolloClient<NormalizedCacheObject>\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined',\n    link: new HttpLink({\n      uri: `${API}/graphql`,\n      fetch,\n      credentials: '',\n    }),\n    cache: new InMemoryCache(),\n  })\n}\n\nexport function initializeApollo(initialState = null) {\n  const _apolloClient = apolloClient ?? createApolloClient()\n\n  if (initialState) {\n    _apolloClient.cache.restore(initialState)\n  }\n  if (typeof window === 'undefined') return _apolloClient\n  apolloClient = apolloClient ?? _apolloClient\n\n  return apolloClient\n}\n\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState])\n  return store\n}\n"]},"metadata":{},"sourceType":"module"}