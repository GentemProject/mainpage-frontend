type Query {
	# Authentication
	getNewAccessToken(token: String!): String

	# Users
	getMe: User

	# Causes
	getCauses: [Cause]

	# Organizations
}

type Mutation {
	# Authentication
	signIn(email: String!, password: String!): Auth
	signUp(name: String!, email: String!, password: String!): Auth

	# Causes
	createCause(name: String!): Cause
	deleteCause(causeId: String!): Boolean
}

type Auth {
	accessToken: String
	refreshToken: String
	user: User
}

type User {
	id: ID
	isAdmin: String
	name: String
	email: String
	createdAt: String
	updatedAt: String
}

type Cause {
	id: ID
	name: String
	createdAt: String
	updatedAt: String
}

type Organization {
	id: ID
	instructionstodeliverproducts: String
	location: String
	city: String
	country: String
	whatsapp: String
	email: String
	name: String
	phones: String
	adminemail: String
	objective: String
	howusedonations: String
	adminname: String
	communityworkwith: String
	description: String
	createdAt: String
	slug: String
}