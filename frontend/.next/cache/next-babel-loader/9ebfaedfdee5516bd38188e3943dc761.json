{"ast":null,"code":"import \"antd/lib/layout/style\";\nimport _Layout from \"antd/lib/layout\";\nvar _jsxFileName = \"/home/maticaba/matidev/gentem-next/pages/org/[slug].tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Layout from '../../components/Layout';\nimport Contenido from '../../components/organization/Contenido';\nimport ContenidoSider from '../../components/organization/ContenidoSider';\nimport useLocation from '../../components/usables/useLocation';\nimport Map from '../../components/organization/Map';\nimport Head from 'next/head';\nimport * as styles from '../../styles/organization.module.scss';\n\nconst ORG = ({\n  organization\n}) => {\n  console.log(organization);\n  const {\n    0: orgLocation,\n    1: setOrgLocation\n  } = useState();\n  useEffect(() => {\n    setOrgLocation(organization.location);\n  }, []);\n  const location = useLocation(orgLocation);\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, \"gentem | \", organization.name)), __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, __jsx(_Layout, {\n    className: styles.ongProfile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: styles.layoutCenter,\n    style: {\n      flexWrap: 'wrap'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, __jsx(Map, {\n    googleMapURL: 'https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyCDr1CIiG6Nop7lpjmIbVk8NVC1IjW_oXE',\n    city: organization.city,\n    country: organization.country,\n    coordenates: location,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }), __jsx(_Layout, {\n    className: `${styles.ongProfileContent} ${styles.layout}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, __jsx(Contenido, {\n    communityworkwith: organization.communityworkwith,\n    name: organization.name,\n    description: organization.description,\n    logo: organization.logo,\n    objetive: organization.objective,\n    howusedonation: organization.howusedonations,\n    website: organization.website,\n    email: organization.email,\n    phone: organization.phones,\n    facebook: organization.facebook,\n    instagram: organization.instagram,\n    paymentslink: organization.paymentslink,\n    whatsapp: organization.whatsapp,\n    sponsors: organization.sponsors,\n    accounts: organization.accounts,\n    city: organization.city,\n    country: organization.country,\n    instructionstodeliverproducts: organization.instructionstodeliverproducts\n    /*  location={location.props.mapLocation} */\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }\n  }), __jsx(ContenidoSider, {\n    name: organization.name,\n    accounts: organization.accounts,\n    instructionstodeliverproducts: organization.instructionstodeliverproducts,\n    paymentslink: organization.paymentslink,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }\n  }))))));\n};\n/* ORG.getInitialProps = async ({ query }) => {\n  // Fetch necessary data for the blog post using params.id\n  const slug = query.slug\n  const request = await api.get(`/organizations/${slug}`)\n  const response = request.data.data as Organization\n\n  return { organization: response }\n} */\n\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('https://api.gentem.org/organizations');\n  const projects = await res.json();\n  console.log(projects); // Get the paths we want to pre-render based on posts\n\n  const paths = projects.data.map(org => `/org/${org.slug}`); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n} // This also gets called at build time\n\nexport async function getStaticProps({\n  params\n}) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`https://api.gentem.org/organizations/${params.slug}`);\n  const organization = await res.json();\n  console.log(organization); // Pass post data to the page via props\n\n  return {\n    props: {\n      organization\n    }\n  };\n}\nexport default ORG;","map":{"version":3,"sources":["/home/maticaba/matidev/gentem-next/pages/org/[slug].tsx"],"names":["React","useState","useEffect","Layout","Contenido","ContenidoSider","useLocation","Map","Head","styles","ORG","organization","console","log","orgLocation","setOrgLocation","location","name","ongProfile","layoutCenter","flexWrap","city","country","ongProfileContent","layout","communityworkwith","description","logo","objective","howusedonations","website","email","phones","facebook","instagram","paymentslink","whatsapp","sponsors","accounts","instructionstodeliverproducts","getStaticPaths","res","fetch","projects","json","paths","data","map","org","slug","fallback","getStaticProps","params","props"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { NextPage } from 'next'\nimport { Organization } from '../../interfaces/organization'\nimport { api } from '../../api'\nimport { Layout as AntLayout } from 'antd'\nimport Layout from '../../components/Layout'\nimport Contenido from '../../components/organization/Contenido'\nimport ContenidoSider from '../../components/organization/ContenidoSider'\nimport useLocation from '../../components/usables/useLocation'\nimport Map from '../../components/organization/Map'\nimport Head from 'next/head'\nimport * as styles from '../../styles/organization.module.scss'\n\ninterface Props {\n  organization: Organization\n}\n\nconst ORG: NextPage<Props> = ({ organization }) => {\n  console.log(organization)\n  const [orgLocation, setOrgLocation] = useState<any>()\n\n  useEffect(() => {\n    setOrgLocation(organization.location)\n  }, [])\n\n  const location = useLocation(orgLocation)\n\n  return (\n    <>\n      <Head>\n        <title>gentem | {organization.name}</title>\n      </Head>\n      <Layout>\n        <AntLayout className={styles.ongProfile}>\n          <div className={styles.layoutCenter} style={{ flexWrap: 'wrap' }}>\n            <Map\n              googleMapURL={\n                'https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyCDr1CIiG6Nop7lpjmIbVk8NVC1IjW_oXE'\n              }\n              city={organization.city}\n              country={organization.country}\n              coordenates={location}\n            ></Map>\n            <AntLayout\n              className={`${styles.ongProfileContent} ${styles.layout}`}\n            >\n              <Contenido\n                communityworkwith={organization.communityworkwith}\n                name={organization.name}\n                description={organization.description}\n                logo={organization.logo}\n                objetive={organization.objective}\n                howusedonation={organization.howusedonations}\n                website={organization.website}\n                email={organization.email}\n                phone={organization.phones}\n                facebook={organization.facebook}\n                instagram={organization.instagram}\n                paymentslink={organization.paymentslink}\n                whatsapp={organization.whatsapp}\n                sponsors={organization.sponsors}\n                accounts={organization.accounts}\n                city={organization.city}\n                country={organization.country}\n                instructionstodeliverproducts={\n                  organization.instructionstodeliverproducts\n                }\n                /*  location={location.props.mapLocation} */\n              />\n              <ContenidoSider\n                name={organization.name}\n                accounts={organization.accounts}\n                instructionstodeliverproducts={\n                  organization.instructionstodeliverproducts\n                }\n                paymentslink={organization.paymentslink}\n              />\n            </AntLayout>\n          </div>\n        </AntLayout>\n      </Layout>\n    </>\n  )\n}\n\n/* ORG.getInitialProps = async ({ query }) => {\n  // Fetch necessary data for the blog post using params.id\n  const slug = query.slug\n  const request = await api.get(`/organizations/${slug}`)\n  const response = request.data.data as Organization\n\n  return { organization: response }\n} */\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('https://api.gentem.org/organizations')\n  const projects = await res.json()\n  console.log(projects)\n\n  // Get the paths we want to pre-render based on posts\n  const paths = projects.data.map((org) => `/org/${org.slug}`)\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false }\n}\n\n// This also gets called at build time\nexport async function getStaticProps({ params }) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`https://api.gentem.org/organizations/${params.slug}`)\n  const organization = await res.json()\n  console.log(organization)\n  // Pass post data to the page via props\n  return { props: { organization } }\n}\n\nexport default ORG\n"]},"metadata":{},"sourceType":"module"}